for(let i = 0; i < 5; i++){
    console.log(i+1);
}

// 1,2,3,4,5
// 1회 실행하고 증감식이 실행된다 (후위연산자)

// for(초기식; 조건식; 증감식){
//     console.log('조건식 다음 실행.')
// }

//1. let i=0 -> 초기화
//2. i < 5   -> 조건 확인
//3. 블록 실행 -> console.log()
//4. 증감식 전위연산 or 후위연산 실행.
//5. 다시 2번(조건식)으로 돌아감.

// 조건식 다음에 무조건 블록을 실행하고 증감식으로 넘어가기때문에 전위식,후위식은 for문에서는 별 소용없다. 근데 i++ 이 가독성이좋아서 많이 쓴다.




// while 문 직접 초기화, 직접 증가.
let i=0;
while(i < 5){
    i++  // 후위연산자는 해당 라인이 지나가면 발동. {}을 의미하는게 아님.
    console.log(i)
}
// 1, 2, 3, 4, 5


/* while(true){  무한루프. cpu 갉아먹음. 메인보드 탐. 온도 높아짐. 절대하지마라.
    console.log("loop")
} */


// 한번은 실행시키고 반복하겠다!
let count = 3;
do {
    console.log('loop1');
    count++;
} while (count < 4)

// 조건식이 false 여도 최초 1회는 실행하겠다!
// 실행 하고 조건식을 보겠다 ! 조건이 맞으면 do 안에 블럭 재실행! count++ 증가안시키면 또 무한루프 돈다.

// 동일한 연산을 반복해서 실행해야할 때!
// 구구단 출력

console.log(`1x1 = ${1}`); // 81번 쓰면 구구단

// 중첩 반복문!
// 1~9
for (let i=1; i<10; i++){
    console.log('--------------------------')
    console.log(`${i}단`); // 9번 나온다.
    console.log('--------------------------')
    for (let j=1; j<10; j++){
        console.log(`${i} x ${j} = ${i*j}`) // 81번 나온다.
    }
}