--변수
"반복, 재사용"

"의미부여"
let avg = (84+28+32+29) / 4  (x)

const math = 84;
let avg = (수학+영어+과학+탐구) ; (o)

--제어문
"실행 여부를 개발자가 제어"
"실행 시킬지 말지, 분기에 따라 다르게 처리할지"

"자연어 설계 -> ~~ 면(if, switch)" 는 머리채부터 잡는다.
퍼블리싱은  다 정해져있으니 해커처럼 빠르게 치지만 
개발자들은 한숨먼저쉰다."

-----------------------------
"키보드에서 손 때"
"충분한 설계를 통해서 구현이 가능할 때 코드를 치기 시작"
-----------------------------



연산자
(+, -, /, *, %)  더하기, 빼기, 나누기, 곱하기, 나머지
5+2 = 7
5-2 = 3
5/2 = 2.5
5*2 = 10
5%2 = 1

let a = "안녕" + "하세요"  //안녕하세요
let b = "1" + 2  //"12"

단항 연산자 (항이 하나다)
let c = ""
c += "안" // 안
c += "녕" // 안녕하세요
c +- "녕" // Nan 문자열은 더하기만가능 뺴는건안된다.

후위연산자 (a++ 식이 끝난 후 더해라.)
let a = 10;
let c = 10 + (a++)
console.log(c, a); // 20, 11

전위연산자 (++a 식이 시작하기전에 더해라.)
let a = 10;
let c = 10 + (++a)
console.log(c, a); // 21, 11


------------------------------------------
조건식

let a = "5"
let b = 5

일치연산자 (===) eqeqeq
a === b (false)   // 값 뿐만아니라 자료형까지 함께 검사. 제일 많이 사용.

동등연산자 (==) eqeq
a == b (true)  // 자료형은 검사하지 않고 값만 검사.

불일치연산자 (!==)  -- 값,자료형 다르니?
a !== b (true)

부등연산자 (!=)  -- 값만 다르니?
a != b (false)

논리 연산자
&&
||

조건식과 조건식의 관계
&& 는 조건식이 둘다 true여야 true
조건식중 하나라도 false 면 false

true && true => true
true && false => false

ex) 
let a = 3;
if(a <= 3 && a > 1){
    console.log("pass")
}

let isEventNumber = (a > 0) && (a % 2 === 0) // false


|| 는 조건식 중 하나라도 true가 있으면 true
true || false -> true
false || false -> false




부등 연산자
>= 이상
<= 이하
> 초과
< 미만

부정 연산자
!
!true -> false

반대식을 사용할 때 
isOddNumber = 이런 반대 값의 변수를 생성하지 않고 부정 연산자로 반대 개념을 표현 가능
if(a>0 && !isEventNumber){

}

!! 
let a = 5;
a에 값이 존재 하면 true가 나온다.
a에 값이 존재하지 않으면 false

!a => false;
!!a => true

let isBollean = !!a 

참거짓을 판단하는 if()안에 들어갈때는 !! (x)
변수를 통해 boolean 값이 필요한 경우 !!를 사용한다.

------------------------------------------
삼항연산자 (true / false 둘 중에 하나일때 실행값이 다를 때)

let a = 3;
let isEvenNumber = (a > 0) && (a % 2 === 0) // false
let b = isEventNumber ? "짝수" : "홀수"
                        -----   ------
                        true    false

let c = isEventNumber ? a > 0 ? true : false : false 

간단한 식이며, true/ false 둘중 하나만 실행되는거라면 삼항연산자가 가독성이 높고
그외는 모두 if else 혹은 if 문이 가독성이 높습니다.


button idsabled = {isLoading ? true : false}  // 로딩중이면 true 아니면 false

------------------------------------------

*********** 함수 (젤중요하단다)

자바스크립트, 파이썬 함수지향프로그래밍 언어
        자바        객체지향프로그래밍 언어

~지향프로그래밍 언어 (프로그래밍 패러다임(틀,체계))

(특정 기능을 하는 코드 집단)

ex) 
어떤 숫자든 숫자 두개를 더하는 기능을 만들고 싶다.

함수 선언
function addNumber(함수명) (재료1, 재료2) {
    return 재료1 + 재료2
}

함수 사용

let number = addNumber(1,2) // return 을 안쓰면 undefined 가 뜨고, return을 써야 3이 밖으로 반환된다.

addNumber(5,10)
addNumber(100,200)

** 함수 내 return을 사용할 때는 함수 선언 식 외부에서 값을 사용하고 싶을 때 return 을 사용
** 만약 return을 사용하지 않으면 undefined를 반환

function printAddNumber(num1, num2) {
    console.log(num1 + num2)
}

printAddNumber(1, 2);

이렇게하면 console만 찍고 값을 가져다 쓰지 않으므로 return 을 안써도된다.

여기서 콜라를 함수로 만들어서 만드는 작업 한다고 함.
function.js
------------------------------------------

반복문