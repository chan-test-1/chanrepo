------------------------------
입력
연산
출력 (요구사항) 
------------------------------

출력 -> 연산 -> 입력 .

FE
메뉴를 클릭하면 메뉴가 슬라이드로 열린다.

메뉴
슬라이드메뉴
클릭이벤트 (입력 - 연산 - 출력)

클릭하면 슬라이드의 메뉴의 높이가 0 -> 300 으로 변한다.

------------------------------

A를 정의하는 주체가 자기 자신이기 떄문에 전달되는 데이터와
출력해야하는 데이터의 흐름을 명확히 알고있어야된다.

function A (param1, param2){ // 파라미터, 인자
    
}

-----------------------------
따라가기 어렵다면 
질문할거 궁금한것만 메모하는 습관.

강사님한테 질문안해도 gpt한테 물어보면되니.
강사님한테 질문안해도 AI 에이전트 (LLM 모델)한테 물어봐도 괜찮습니다.
gpt는 연관 데이터를 보여주는거지 사고해서 보여주는게아니다.

-----------------------------


함수의 종류

일반함수 (function)
선언, 호출

화살표 함수 ( => )
선언, 호출, 변수에 함수를 할당하는 형태로 this라는 값이 일반함수와 다르다. (일반함수와 표기법이 다르다는정도로만 알아라.)

기명함수 (선언 시 함수에 이름을 부여, 재사용, 의미부여)

익명함수 (이름이 없는 함수, 한번 쓰고 안쓰는, 의미를 부여하지 않아도 의미가 추론)
혼자서 실행할 수 없는 함수
--> 호출하려면 이름이 없기때문에 혼자 쓸 수 없고 콜백함수나 즉시실행함수와 함께 쓰이는 경우가 많음.

즉시실행함수 ()()  // 첫번째괄호는 선언, 두번째괄호는 호출.
선언과 동시에 호출이 되는 함수, 기명, 익멱 둘다 사용이 가능

---------------------function.js-------------------------

** 콜백함수 **

함수 A를 정의했습니다.
함수 A를 호출하지 않아요.
단, 함수 B 호출의 매개변수로

function addNumber(num){
    return 5;
}
function A() {  //선언
    console.log('A')
}

B는 숫자와 함수를 매개변수로 전달받고
숫자에 값을 1 더하고 전달받은 함수에 매개변수로 전달하여 실행   fn = function 의미

function B(number, callbackFn) {
    const plusNumber = number++
    callbackFn(plusNumber)
    // A뿐만 아니라 그 어떤 함수도 실행될 수 있다.
}

B(5, A)
B(5, addNumber)


function 부모함수(콜백함수){
    ... 연산(가능)
    그연산된 결과로 콜백함수를 실행
}

콜백함수를 쓰는이유는 자율성. 원하는 함수를 넘김으로써 상황에따라 연산이나 결과를 다르게 할 수 있다.

------------------------------------------------------
함수의 구조로
function(선언식) 함수명(선택) (재료1,재료2){
    재료1과 재료2는 호출문에 의해서 전달받는 값
    전달받은 값과 형태와 상관없이 이 함수는 동일한 연산을 실행

    동일한 파라미터가 전달되면 항상 동일한 결과가 나와야함.
}

전달받은 함수를 호출한다 => 콜백함수.
------------------------------------------------------

/* 
toss 가 원하는.. (내코드가 다른사람이 보기 좋을까?) 
모듈화 및 코드 품질을 지키기 위해 고민한 리포지토리
명확한 디렉토리 구조로 코드 파일을 찾고 수정하기 쉽도록 고민한 리포지토리면 좋아요
타입스크립트를 정확하게 사용하기 위해 고민한 리포지토리
제품의 완성도를 끌어올리기위해 고민한 리포지토리
커밋이나 pull request 를 읽기 쉽게 나눠서 협업을 쉽게 한 리포지토리
화려한 기술이나 코드 패턴보다는 본질적인 코드의 고민이 드러나는 리포지토리면 
프로젝트가 어떤 것을 구현하는지 알 수 있는 README가 있는 리포지토리 
*/

-----------------------------

원시 자료형 (문자열, 숫자, undefined, null)
-> 객체 ****** (Object, Array) 

-----------------------------

객체
key, value로 이루어진 properties의 집합.

김성용
나이 20
키 190
취미 코딩
--------. 나이, 키, 취미가 재사용되어서 코딩을 해야한다할 때, 변수로 지정

let seongyongAge = 20
let seongyongHeight = 190
let seongyongHobby = "코딩"

-------- 

let 짱구 ={
    age:5,
    height: 110,
    hobby: "말썽"
}

let seongyong = {
    age: 20,
    height: 190,
    hobby: "코딩"
}

-------
어떤 속성이 있는지 자동완성. 값찾기 편리, 하나의주제로 값들이 묶여있을때 사용하기 좋다.

seongyong.age
seongyong.height


-------

const 땡땡이원피스 = { // 백엔드에서 오는 데이터가 다 객체, JSON 형태로 온다.
    price: 20,000,
    productCode : 21123345234
}

price 는 key ,  20,000 은 value ! 이 한쌍을 property


object.js

quizz.js

--------------------------------
다음시간은 배열 !!! 강사님과 마지막 시간 !!!!