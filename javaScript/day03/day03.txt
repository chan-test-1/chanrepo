------------------------------
입력
연산
출력 (요구사항) 
------------------------------

출력 -> 연산 -> 입력 .

FE
메뉴를 클릭하면 메뉴가 슬라이드로 열린다.

메뉴
슬라이드메뉴
클릭이벤트 (입력 - 연산 - 출력)

클릭하면 슬라이드의 메뉴의 높이가 0 -> 300 으로 변한다.

------------------------------

A를 정의하는 주체가 자기 자신이기 떄문에 전달되는 데이터와
출력해야하는 데이터의 흐름을 명확히 알고있어야된다.

function A (param1, param2){ // 파라미터, 인자
    
}

-----------------------------
따라가기 어렵다면 
질문할거 궁금한것만 메모하는 습관.

강사님한테 질문안해도 gpt한테 물어보면되니.
강사님한테 질문안해도 AI 에이전트 (LLM 모델)한테 물어봐도 괜찮습니다.
gpt는 연관 데이터를 보여주는거지 사고해서 보여주는게아니다.

-----------------------------


함수의 종류

일반함수 (function)
선언, 호출

화살표 함수 ( => )
선언, 호출, 변수에 함수를 할당하는 형태로 this라는 값이 일반함수와 다르다. (일반함수와 표기법이 다르다는정도로만 알아라.)

기명함수 (선언 시 함수에 이름을 부여, 재사용, 의미부여)

익명함수 (이름이 없는 함수, 한번 쓰고 안쓰는, 의미를 부여하지 않아도 의미가 추론)
혼자서 실행할 수 없는 함수
--> 호출하려면 이름이 없기때문에 혼자 쓸 수 없고 콜백함수나 즉시실행함수와 함께 쓰이는 경우가 많음.

즉시실행함수 ()()  // 첫번째괄호는 선언, 두번째괄호는 호출.
선언과 동시에 호출이 되는 함수, 기명, 익멱 둘다 사용이 가능

** 콜백함수 **

함수 A를 정의했습니다.
함수 A를 호출하지 않아요.
단, 함수 B 호출의 매개변수로

function addNumber(num){
    return 5;
}
function A() {  //선언
    console.log('A')
}

B는 숫자와 함수를 매개변수로 전달받고
숫자에 값을 1 더하고 전달받은 함수에 매개변수로 전달하여 실행   fn = function 의미

function B(number, callbackFn) {
    const plusNumber = number++
    callbackFn(plusNumber)
    // A뿐만 아니라 그 어떤 함수도 실행될 수 있다.
}

B(5, A)
B(5, addNumber)



-----------------------------

원시 자료형 (문자열, 숫자, undefined, null)
-> 객체 ****** (Object, Array) 

-----------------------------


